///////When would you want to use a remote repository rather than keeping all your work local?

Use a remote repository makes my local "clean", besides, remote repository works best when working from different place using different computers to get access to the project.

/////Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

Because for the most of the times, local repositories are ahead of the remote repository, for it's always under changing rather than the remote repository is the one that's been commited.

/////Describe the differences between forks, clones, pull, and branches. When would you use one instead of another?

Fork: Make a copy from other's Github repository to one's own Github repository.
Branch: It represents an independent line of development, serce as an abstraction for the edit/stage/commit process.
Clone: Make a working copy of existing remote repository, usually used only once.  
Pull: Update the local repository with new commit from remote respository.

//////What is the benefit of having a copy of the last known state of the remote stored locally?

By having a copy locally, I will be able to easily access to the latest develop stage of the certain project even if I am offline.


//////How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

If I didn't learn Git/Github, I will probably setup an Dropbox/Google Drive account, upload my project to the cloud, then share the url with my partners. It will be eaiser at first because I don't need to learn the Git, and I'm sure in the beginning the project is small enough to be upload to the cloud within seconds/minutes. But when it becomes more serious, more complex, and need more collaboration, problems occur. I would harly imagine working by simply sharing the projects url and let others 'mail' me the changes they've made, and adding into the 'master' without pre-review. It will be a mess, that is no doubt.


//////When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

My answer will be "Always, always make changes in a seperate branch". It is more effecient when collaborating with others in a same project, other will always get the idea of the changes simply by checking the branch and modifie if needed without messing up the master branch. 
